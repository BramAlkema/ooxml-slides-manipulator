name: PPTX Processor Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  # Removed daily schedule to stop morning emails
  # schedule:
  #   - cron: '0 2 * * *'

jobs:
  playwright-tests:
    name: Playwright Tests (Brave Browser)
    timeout-minutes: 60
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        npm ci
        npx playwright install
        
    - name: Install Brave Browser
      run: npx playwright install chromium  # Brave runs on Chromium
      
    - name: Test local PPTX processing
      run: |
        # Test core functionality locally first
        npm run test:mvp || echo "MVP test skipped - no test file"
        npm run test:cloud || echo "Cloud test skipped"
        
    - name: Run Playwright tests with Brave
      env:
        GAS_PROJECT_URL: ${{ secrets.GAS_PROJECT_URL }}
        TEST_PPTX_FILE_ID: ${{ secrets.TEST_PPTX_FILE_ID }}
        GOOGLE_CLIENT_EMAIL: ${{ secrets.GOOGLE_CLIENT_EMAIL }}
        GOOGLE_PRIVATE_KEY: ${{ secrets.GOOGLE_PRIVATE_KEY }}
      run: npx playwright test --project=Brave
      
    - name: Upload Playwright Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report-brave
        path: playwright-report/
        retention-days: 30

  clasp-validation:
    name: Validate Clasp Configuration
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Validate clasp configuration
      run: |
        # Check if .clasp.json exists and is valid
        if [ -f ".clasp.json" ]; then
          echo "‚úÖ .clasp.json found"
          cat .clasp.json
        else
          echo "‚ùå .clasp.json not found"
          exit 1
        fi
        
        # Check if appsscript.json is valid
        if [ -f "appsscript.json" ]; then
          echo "‚úÖ appsscript.json found"
          cat appsscript.json | jq . # Validate JSON
        else
          echo "‚ùå appsscript.json not found"
          exit 1
        fi

  library-structure-check:
    name: PPTX Processor Structure Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Validate PPTX processor structure
      run: |
        echo "üîç Checking PPTX processor structure..."
        
        # Check main files for new architecture
        required_files=(
          "src/Main.js"
          "src/OOXMLDeployment.js"
          "lib/OOXMLJsonService.js"
          "lib/FFlatePPTXService.js"
          "lib/OOXMLCore.js"
          "DeployFromGAS.js"
          "package.json"
          ".clasp.json"
          "appsscript.json"
        )
        
        for file in "${required_files[@]}"; do
          if [ -f "$file" ]; then
            echo "‚úÖ $file"
          else
            echo "‚ùå $file missing"
            exit 1
          fi
        done
        
        echo "üéâ All required PPTX processor files present"
        
    - name: Check for JavaScript syntax errors
      run: |
        echo "üîç Checking JavaScript syntax..."
        
        # Use Node.js to check syntax of main files  
        echo "Checking core files..."
        
        # Check src/ files
        for file in src/*.js; do
          if [ -f "$file" ]; then
            echo "Checking $file..."
            node -c "$file" && echo "‚úÖ $file syntax OK" || echo "‚ùå $file has syntax errors"
          fi
        done
        
        # Check lib/ files
        for file in lib/*.js; do
          if [ -f "$file" ]; then
            echo "Checking $file..."
            node -c "$file" && echo "‚úÖ $file syntax OK" || echo "‚ùå $file has syntax errors"
          fi
        done
        
        # Check deployment file
        if [ -f "DeployFromGAS.js" ]; then
          echo "Checking DeployFromGAS.js..."
          node -c "DeployFromGAS.js" && echo "‚úÖ DeployFromGAS.js syntax OK" || echo "‚ùå DeployFromGAS.js has syntax errors"
        fi

  documentation-check:
    name: Documentation Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check documentation completeness
      run: |
        echo "üìö Checking documentation..."
        
        # Check required documentation files
        docs=("README.md" "QUICKSTART.md" "DEPLOYMENT.md")
        
        for doc in "${docs[@]}"; do
          if [ -f "$doc" ]; then
            echo "‚úÖ $doc exists"
            if [ -s "$doc" ]; then
              echo "‚úÖ $doc has content ($(wc -l < $doc) lines)"
            else
              echo "‚ö†Ô∏è $doc is empty"
            fi
          else
            echo "‚ùå $doc missing"
            exit 1
          fi
        done
        
        # Check if README has key sections for PPTX processor
        if grep -q "PPTX Processing" README.md && \
           grep -q "Quick Start" README.md && \
           grep -q "Deploy from Google Apps Script" README.md; then
          echo "‚úÖ README has required PPTX processor sections"
        else
          echo "‚ö†Ô∏è README missing some required sections"
        fi
        
        # Check QUICKSTART has setup instructions
        if [ -f "QUICKSTART.md" ]; then
          if grep -q "5-Minute" QUICKSTART.md || grep -q "Quick Start" QUICKSTART.md; then
            echo "‚úÖ QUICKSTART has setup instructions"
          else
            echo "‚ö†Ô∏è QUICKSTART missing setup instructions"
          fi
        fi

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run security scan
      run: |
        echo "üîí Running security scan..."
        
        # Check for potential security issues
        echo "Checking for hardcoded secrets..."
        
        # Look for potential API keys or secrets (basic check)
        if grep -r -i "api[_-]key\|secret\|password\|token" --include="*.js" . | grep -v "test\|example"; then
          echo "‚ö†Ô∏è Potential secrets found - review carefully"
        else
          echo "‚úÖ No obvious secrets detected"
        fi
        
        # Check file permissions
        echo "Checking file permissions..."
        find . -name "*.js" -perm /111 && echo "‚ö†Ô∏è Executable JS files found" || echo "‚úÖ No executable JS files"

  publish-check:
    name: Publish Readiness Check
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check if ready for publishing
      run: |
        echo "üöÄ Checking publish readiness..."
        
        # Check package.json completeness
        if [ -f "package.json" ]; then
          echo "‚úÖ package.json exists"
          
          # Check required fields
          required_fields=("name" "version" "description" "main" "license" "repository")
          
          for field in "${required_fields[@]}"; do
            if jq -e ".$field" package.json > /dev/null; then
              echo "‚úÖ package.json has $field"
            else
              echo "‚ùå package.json missing $field"
              exit 1
            fi
          done
        else
          echo "‚ùå package.json not found"
          exit 1
        fi
        
        # Check version consistency
        VERSION=$(jq -r '.version' package.json)
        echo "üì¶ Current version: $VERSION"
        
        echo "üéâ Ready for publishing!"

  report-results:
    name: PPTX Processor Test Summary
    runs-on: ubuntu-latest
    needs: [playwright-tests, clasp-validation, library-structure-check, documentation-check, security-scan]
    if: always()
    
    steps:
    - name: Generate PPTX processor test summary
      run: |
        echo "# PPTX Processor Test Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Test Status" >> $GITHUB_STEP_SUMMARY
        echo "- Playwright Tests (Brave): ${{ needs.playwright-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Clasp Validation: ${{ needs.clasp-validation.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- PPTX Processor Structure: ${{ needs.library-structure-check.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Documentation: ${{ needs.documentation-check.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Security Scan: ${{ needs.security-scan.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Repository Information" >> $GITHUB_STEP_SUMMARY
        echo "- Branch: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- Commit: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- Trigger: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Architecture Notes" >> $GITHUB_STEP_SUMMARY
        echo "- Platform: Google Apps Script + Cloud Run" >> $GITHUB_STEP_SUMMARY
        echo "- Browser: Brave (Chromium-based)" >> $GITHUB_STEP_SUMMARY
        echo "- Deployment: US Free Tier (us-central1)" >> $GITHUB_STEP_SUMMARY